import intern

input relation NODE(
	name: IString,
	unschedulable: bool,
	out_of_disk: bool,
	memory_pressure: bool,
	disk_pressure: bool,
	pid_pressure: bool,
	ready: bool,
	network_unavailable: bool,
	cpu_capacity: signed<64>,
	memory_capacity: signed<64>,
	ephemeral_storage_capacity: signed<64>,
	pods_capacity: signed<64>,
	cpu_allocatable: signed<64>,
	memory_allocatable: signed<64>,
	ephemeral_storage_allocatable: signed<64>,
	pods_allocatable: signed<64>)

input relation POD(
	pod_name: IString,
	status: IString,
	node_name: IString,
	namespace: IString,
	cpu_request: signed<64>,
	memory_request: signed<64>,
	ephemeral_storage_request: signed<64>,
	pods_request: signed<64>,
	owner_name: IString,
	creation_timestamp: IString,
	priority: signed<64>,
	schedularName: IString,
	has_node_selector_labels: bool,
    has_pod_affinity_requirements: bool
)

input relation PODPORTSREQUEST(pod_name: IString, host_ip:IString, host_port: signed<64>, host_protocol: IString)

input relation CONTAINERHOSTPORTS(pod_name:IString, node_name:IString, host_ip:IString, host_port:signed<64>, host_protocol:IString)

input relation PODNODESELECTORLABELS(pod_name:IString, term: signed<64>, match_expression: signed<64>, num_match_expressions: signed<64>, label_key:IString, label_operator:IString, label_value:IString)

input relation PODSAFFINITYMATCHEXPRESSIONS(pod_name:IString, label_selector: signed<64>, match_expression: signed<64>,  num_match_expressions: signed<64>, label_key:IString, label_operator:IString, label_value:IString, topology_key: IString)

input relation PODSANTIAFFINITYMATCHEXPRESSIONS(pod_name:IString, label_key: IString, label_operator:IString, label_value:IString, topology_key:IString)

input relation PODLABELS(pod_name:IString, label_key:IString, label_value:IString)

input relation NODELABELS(node_name:IString, label_key:IString, label_value:IString)

input relation VOLUMELABELS(volume_name:IString, pod_name: IString, label_key:IString, label_value:IString)

input relation PODBYSERVICE(pod_name:IString, service_name:IString)

input relation SERVICEAFFINITYLABELS(label_key:IString)

input relation LABELSTOCHECKFORPRESENCE(label_key:IString, present:bool)

input relation NODETAINTS(node_name:IString, taint_key:IString, taint_value:IString, taint_effect:IString)

input relation PODTOLERATIONS(pod_name:IString, tolerations_key:IString, tolerations_value:IString, tolerations_effect:IString, tolerations_operator:IString)

input relation NODEIMAGES(node_name:IString, image_name:IString, image_size:signed<64>)

input relation PODIMAGES(pod_name:IString, image_name:IString)

input relation BATCHSIZE(pending_pods_limit: signed<64>)

/**Need to be sorted**/
output relation PODSTOASSIGNNOLIMIT(pod_name:IString, status:IString, node_name:IString, namespace:IString, cpu_request:signed<64>, memory_request:signed<64>, ephemeral_storage_request:signed<64>, pods_request:signed<64>, owner_name:IString, creation_timestamp:IString, has_node_selector_labels: bool, has_pod_affinity_requirements: bool)

/**We are supposed to only pick a few but going with all of them for now**/
output relation PODSTOASSIGN(pod_name:IString, status:IString, controllable__node_name:IString, namespace:IString, cpu_request:signed<64>, memory_request:signed<64>, ephemeral_storage_request:signed<64>, pods_request:signed<64>, owner_name:IString, creation_timestamp:IString, has_node_selector_labels: bool, has_pod_affinity_requirements: bool)

output relation PODSWITHPORTSREQUESTS(controllable__node_name: IString, host_ip: IString, host_port: signed<64>, host_protocol: IString)

output relation CPUUSEDPERNODE(name: IString, cpu: signed<64>)

output relation MEMORYUSEDPERNODE(name: IString, memory: signed<64>)

output relation PODSUSEDPERNODE(name:IString, pods: signed<64>)

output relation SPARECAPACITY(name:IString, cpu_remaining: signed<64>, memory_remaining: signed<64>, pods_remaining: signed<64>)

output relation PODNODESELECTORMATCHES(pod_name:IString, node_name:IString)

output relation PODNODESELECTORMATCHESEXISTS(pod_name:IString, node_name:IString)

output relation PODNODESELECTORMATCHESDOESNOTEXIST(pod_name:IString, node_name:IString)

output relation PODNODESELECTORMATCHESIN(pod_name:IString, node_name:IString)

output relation PODNODESELECTORMATCHESNOTIN(pod_name:IString, node_name:IString)

relation Dummy()
Dummy().

function sum(g: Group<(signed<64>)>): (signed<64>) =
{
    var sum: signed<64> = 0;
    for (resource in g) {
        sum = resource + sum
    };
    sum
}

function count_uniq(g: Group<(signed<64>)>): (bit<64>) =
{
    var set: Set<signed<64>> = set_empty();
    for (item in g) {
        set_insert(set, item)
    };
    var count: bit<64> = set_size(set);
    count
}

function cast_bit64_to_bigint(x: bit<64>): bigint = { x as bigint }
function cast_bit64_to_signedbit64(x: bit<64>): signed<64> = { x as signed<64> }

CPUUSEDPERNODE(node_name, cpu) :-
	POD(.node_name = node_name, .cpu_request = cpu_request),
	var cpu = Aggregate((node_name), sum(cpu_request)).
	
MEMORYUSEDPERNODE(node_name, memory) :-
	POD(.node_name = node_name, .memory_request = memory_request),
	var memory = Aggregate((node_name), sum(memory_request)).

PODSUSEDPERNODE(node_name, pods):-
	POD(.node_name = node_name, .pods_request = pods_request),
	var pods = Aggregate((node_name), sum(pods_request)).

SPARECAPACITY(node_name, cpu_remaining, memory_remaining, pods_remaining) :-
	POD(.node_name = node_name),
	(istring_str(node_name) != "null"),
	CPUUSEDPERNODE(node_name, cpu),
	MEMORYUSEDPERNODE(node_name, memory),
	PODSUSEDPERNODE(node_name, pods),
	NODE(.name = node_name, .cpu_allocatable = cpu_allocatable, .memory_allocatable = memory_allocatable, .pods_allocatable = pods_allocatable),
	var cpu_remaining = cpu_allocatable-cpu,
	var memory_remaining =  memory_allocatable-memory,
	var pods_remaining = pods_allocatable-pods.

PODSTOASSIGNNOLIMIT(pod_name, status, node_name, namespace, cpu_request, memory_request, ephemeral_storage_request, pods_request, owner_name, creation_timestamp, has_node_selector_labels, has_pod_affinity_requirements):-
	POD(pod_name, status, node_name, namespace, cpu_request, memory_request, ephemeral_storage_request, pods_request, owner_name, creation_timestamp, priority, schedulerName, has_node_selector_labels, has_pod_affinity_requirements),
	(istring_str(status) == "Pending"),
	(istring_str(node_name) == "null"),
	(istring_str(schedulerName) == "dcm-scheduler").

PODSTOASSIGN(pod_name, status, node_name, namespace, cpu_request, memory_request, ephemeral_storage_request, pods_request, owner_name, creation_timestamp, has_node_selector_labels, has_pod_affinity_requirements):-
	PODSTOASSIGNNOLIMIT(pod_name, status, node_name, namespace, cpu_request, memory_request, ephemeral_storage_request, pods_request, owner_name, creation_timestamp, has_node_selector_labels, has_pod_affinity_requirements).

PODSWITHPORTSREQUESTS(controllable__node_name, host_ip, host_port, host_protocol):-
    PODSTOASSIGN(.pod_name = pod_name, .controllable__node_name = controllable__node_name),
    PODPORTSREQUEST(.pod_name = pod_name, .host_ip = host_ip, .host_port = host_port, .host_protocol = host_protocol).

PODNODESELECTORMATCHESEXISTS(pod_name, node_name):-
    PODNODESELECTORLABELS(.pod_name = pod_name, .term = term, .match_expression = match_expression, .num_match_expressions = num_match_expressions, .label_key = label_key, .label_operator = label_operator, .label_value = label_value),
    (istring_str(label_operator) == "Exists"),
    NODELABELS(.node_name = node_name, .label_key = label_key),
    PODSTOASSIGN(.pod_name = pod_name),
    var distinct_match_expression = Aggregate((pod_name, node_name, term, label_operator, num_match_expressions), count_uniq(match_expression)),
    (num_match_expressions == cast_bit64_to_signedbit64(distinct_match_expression)).

PODNODESELECTORMATCHESIN(pod_name, node_name):-
    PODNODESELECTORLABELS(.pod_name = pod_name, .term = term, .match_expression = match_expression, .num_match_expressions = num_match_expressions, .label_key = label_key, .label_operator = label_operator, .label_value = label_value),
    (istring_str(label_operator) == "In"),
    NODELABELS(.node_name = node_name, .label_key = label_key, .label_value = label_value),
    PODSTOASSIGN(.pod_name = pod_name),
    var distinct_match_expression = Aggregate((pod_name, node_name, term, label_operator, num_match_expressions), count_uniq(match_expression)),
    (num_match_expressions == cast_bit64_to_signedbit64(distinct_match_expression)).

PODNODESELECTORMATCHESNOTIN(pod_name, node_name):-
    PODSTOASSIGN(.pod_name = pod_name),
    PODNODESELECTORLABELS(.pod_name = pod_name, .label_operator = label_operator, .label_key = label_key, .label_value = label_value),
    (istring_str(label_operator) == "NotIn"),
    NODELABELS(.node_name = node_name, .label_key = label_key, .label_value = label_value).

PODNODESELECTORMATCHESDOESNOTEXIST(pod_name, node_name):-
    PODSTOASSIGN(.pod_name = pod_name),
    PODNODESELECTORLABELS(.pod_name = pod_name, .label_operator = label_operator, .label_key = label_key),
    (istring_str(label_operator) == "DoesNotExist"),
    NODELABELS(.node_name = node_name, .label_key = label_key).

PODNODESELECTORMATCHES(pod_name, node_name):-
    PODNODESELECTORMATCHESIN(.pod_name = pod_name, .node_name = node_name),
    not PODNODESELECTORMATCHESNOTIN(pod_name, node_name),
    not PODNODESELECTORMATCHESDOESNOTEXIST(pod_name, node_name).

PODNODESELECTORMATCHES(pod_name, node_name):-
    PODNODESELECTORMATCHESEXISTS(.pod_name = pod_name, .node_name = node_name),
    not PODNODESELECTORMATCHESNOTIN(pod_name, node_name),
    not PODNODESELECTORMATCHESDOESNOTEXIST(pod_name, node_name).
