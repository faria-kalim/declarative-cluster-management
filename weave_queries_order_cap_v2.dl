import intern

input relation NODE(
	name: IString,
	is_master: bool,
	unschedulable: bool,
	out_of_disk: bool,
	memory_pressure: bool,
	disk_pressure: bool,
	pid_pressure: bool,
	ready: bool,
	network_unavailable: bool,
	cpu_capacity: signed<64>,
	memory_capacity: signed<64>,
	ephemeral_storage_capacity: signed<64>,
	pods_capacity: signed<64>,
	cpu_allocatable: signed<64>,
	memory_allocatable: signed<64>,
	ephemeral_storage_allocatable: signed<64>,
	pods_allocatable: signed<64>)

input relation POD(
	pod_name: IString,
	status: IString,
	controllable__node_name: IString,
	namespace: IString,
	cpu_request: signed<64>,
	memory_request: signed<64>,
	ephemeral_storage_request: signed<64>,
	pods_request: signed<64>,
	owner_name: IString,
	creation_timestamp: IString,
	priority: signed<64>)

input relation PODPORTSREQUEST(pod_name: IString, host_ip:string, host_port: signed<64>, host_protocol: IString)

input relation CONTAINERHOSTPORTS(pod_name:IString, node_name:IString, host_ip:IString, host_port:signed<64>, host_protocol:IString)

input relation PODNODESELECTORLABELS(pod_name:IString, label_key:IString, label_value:IString, operator:IString)

input relation PODSAFFINITYMATCHEXPRESSIONS(pod_name:IString, label_key:IString, label_value:IString, operator:IString, topology_key:IString)

input relation PODSANTIAFFINITYMATCHEXPRESSIONS(pod_name:IString, label_key: IString, label_value:IString, operator:IString, topology_key:IString)

input relation PODLABELS(pod_name:IString, label_key:IString, label_value:IString, is_selector:bool)

input relation NODELABELS(node_name:IString, label_key:IString, label_value:IString)

input relation VOLUMELABELS(volume_name:IString, pod_name: IString, label_key:IString, label_value:IString)

input relation PODBYSERVICE(pod_name:IString, service_name:IString)

input relation SERVICEAFFINITYLABELS(label_key:IString)

input relation LABELSTOCHECKFORPRESENCE(label_key:IString, present:bool)

input relation NODETAINTS(node_name:IString, taint_key:IString, taint_value:IString, taint_effect:IString)

input relation PODTOLERATIONS(pod_name:IString, taint_key:IString, taint_value:IString, taint_effect:IString, taint_operator:IString)

input relation NODEIMAGES(node_name:IString, image_name:IString, image_size:signed<64>)

input relation PODIMAGES(pod_name:IString, image_name:IString)

input relation PODSPERNODEPERGROUP(owner_name:IString, pods_limit:signed<64>)

input relation BATCHSIZE(pending_pods_limit: signed<64>)

output relation PENDINGSERVICESWITHAFFINITYLABELS(service_name:IString, node_name:IString)

output relation VALIDNODESET(node_name:IString)

output relation PODSTOASSIGNLABELS(pod_name:IString, label_key:IString, label_value:IString, node_name:IString)

output relation CANDIDATENODESFORPODS(pod_name:IString, node_name:IString)

output relation PODSTOASSIGNWITHPODAFFINITYLABELS(pod_name:IString, label_key:IString, label_value:IString, node_name:IString)

output relation PODSTOASSIGNWITHPODANTIAFFINITYLABELS(pod_name:IString, label_key:IString, label_value:IString, node_name:IString)

output relation ALLPODS(pod_name:IString, status:IString, node_name:IString, namespace:IString, cpu_request:signed<64>, memory_request:signed<64>, ephemeral_storage_request:signed<64>, pods_request:signed<64>, owner_name:IString, creation_timestamp:IString, priority:signed<64>, has_node_affinity:bool)

output relation CPUUSEDPERNODE(name: IString, cpu: signed<64>)

output relation MEMORYUSEDPERNODE(name: IString, memory: signed<64>)

output relation PODSUSEDPERNODE(name:IString, pods: signed<64>)

output relation SPARECAPACITY(name:IString, cpu_remaining: signed<64>, memory_remaining: signed<64>, pods_remaining: signed<64>)

output relation SIZEPRESENCELABELS(size_labels:bit<64>)

output relation CANDIDATENODESFORPODSPODAFFINITY(label_key:IString, label_value:IString, node_name:IString)

output relation BLACKLISTNODESFORPODSPODANTIAFFINITY(label_key:IString, label_value:IString, node_name:IString)

output relation IMAGELOCALITY(pod_name:IString, node_name:IString, image_size:signed<64>)

output relation SPAREPODSPERNODEPERGROUP(node_name:IString, owner_name:IString, pods_remaining: signed<64>)

output relation PODHASNODEAFFINITY(pod_name:IString, node_name:IString, has_node_affinity:bool)

relation Dummy()
Dummy().



/**Need to be sorted**/
output relation PODSTOASSIGNNOLIMIT(pod_name:IString, status:IString, node_name:IString, namespace:IString, cpu_request:signed<64>, memory_request:signed<64>, ephemeral_storage_request:signed<64>, pods_request:signed<64>, owner_name:IString, creation_timestamp:IString, has_node_affinity:bool)

/**We are supposed to only pick a few but going with all of them for now**/
output relation PODSTOASSIGN(pod_name:IString, status:IString, node_name:IString, namespace:IString, cpu_request:signed<64>, memory_request:signed<64>, ephemeral_storage_request:signed<64>, pods_request:signed<64>, owner_name:IString, creation_timestamp:IString, has_node_affinity:bool)


function sum(g: Group<(signed<64>)>): (signed<64>) =
{
    var sum: signed<64> = 0;
    for (resource in g) {
        sum = resource + sum
    };
    sum
}

function cast_bit64_to_bigint(x: bit<64>): bigint = { x as bigint }
function cast_bit64_to_signedbit64(x: bit<64>): signed<64> = { x as signed<64> }

CPUUSEDPERNODE(node_name, cpu) :-
	POD(_, _, node_name, _, cpu_request, _, _, _, _, _, _),
	var cpu = Aggregate((node_name), sum(cpu_request)).
	
MEMORYUSEDPERNODE(node_name, memory) :-
	POD(pod_name, _, node_name, _, _, memory_request, _, _, _, _, _),
	var memory = Aggregate((node_name), sum(memory_request)).

PODSUSEDPERNODE(node_name, pods):-
	POD(pod_name, _, node_name, _, _, _, _, pods_request, _, _, _),
	var pods = Aggregate((node_name), sum(pods_request)).


SPARECAPACITY(node_name, cpu_remaining, memory_remaining, pods_remaining) :-
	POD(.controllable__node_name = node_name),
	(istring_str(node_name) != "null"),
	CPUUSEDPERNODE(node_name, cpu),
	MEMORYUSEDPERNODE(node_name, memory),
	PODSUSEDPERNODE(node_name, pods),
	NODE(node_name, _, _, _, _, _, _, _, _, _, _, _, _, cpu_allocatable, memory_allocatable, _, pods_allocatable),
	var cpu_remaining =  cpu_allocatable-cpu,
	var memory_remaining =  memory_allocatable-memory,
	var pods_remaining = pods_allocatable-pods.

PENDINGSERVICESWITHAFFINITYLABELS(service_name, node_name):-
	POD(pod_name, status, node_name, _, _, _, _, _, _, _, _),
	(istring_str(status) == "Pending"),
	PODBYSERVICE(pod_name, service_name),
	PODLABELS(pod_name, label_key, label_value, _),
	SERVICEAFFINITYLABELS(label_key).

SIZEPRESENCELABELS(nrecords):-
	LABELSTOCHECKFORPRESENCE(label_key, present),
	var nrecords = Aggregate((), group_count(())).

SIZEPRESENCELABELS(0):-
	Dummy(),
	not LABELSTOCHECKFORPRESENCE().

VALIDNODESET(node_name) :- 
	NODELABELS(node_name, label_key, label_value),
 	LABELSTOCHECKFORPRESENCE(label_key, present),
	var size_n = Aggregate((node_name), group_count(label_key)),
	SIZEPRESENCELABELS(size_labels),
	(size_n == size_labels).

CANDIDATENODESFORPODSPODAFFINITY(label_key, label_value, node_name):-
    POD(.pod_name = pod_name, .controllable__node_name = node_name),
    (istring_str(node_name) != "null"),
    PODLABELS(pod_name, label_key, label_value, _),
    PODSAFFINITYMATCHEXPRESSIONS(pod_name, label_key, label_value, _, _).

BLACKLISTNODESFORPODSPODANTIAFFINITY(label_key, label_value, node_name):-
	POD(.pod_name = pod_name, .controllable__node_name = node_name),
    (istring_str(node_name) != "null"),
    PODLABELS(pod_name, label_key, label_value, _),
	PODSANTIAFFINITYMATCHEXPRESSIONS(pod_name, label_key, label_value, _, _).

PODHASNODEAFFINITY(pod_name, node_name, true):-
	POD(.pod_name = pod_name, .controllable__node_name = node_name),
	PODNODESELECTORLABELS(.pod_name = pod_name).

PODHASNODEAFFINITY(pod_name, node_name, false):-
	POD(.pod_name = pod_name, .controllable__node_name = node_name),
	not PODNODESELECTORLABELS(.pod_name = pod_name).

PODSTOASSIGNNOLIMIT(pod_name, status, node_name, namespace, cpu_request, memory_request, ephemeral_storage_request, pods_request, owner_name, creation_timestamp, has_node_affinity):-
	POD(pod_name, status, node_name, namespace, cpu_request, memory_request, ephemeral_storage_request, pods_request, owner_name, creation_timestamp, priority),
	(istring_str(status) == "Pending"),
	(istring_str(node_name) == "null"),
	PODNODESELECTORLABELS(pod_name, label_key, label_value, _),
	PODHASNODEAFFINITY(pod_name, node_name, has_node_affinity).

PODSTOASSIGN(pod_name, status, node_name, namespace, cpu_request, memory_request, ephemeral_storage_request, pods_request, owner_name, creation_timestamp, has_node_affinity):-
	PODSTOASSIGNNOLIMIT(pod_name, status, node_name, namespace, cpu_request, memory_request, ephemeral_storage_request, pods_request, owner_name, creation_timestamp, has_node_affinity).		

SPAREPODSPERNODEPERGROUP(node_name, owner_name, pods_remaining) :-
	POD(.pod_name = pod_name, .status = status, .controllable__node_name = node_name, .owner_name = owner_name),
	(istring_str(node_name) != "null"),
	var total = Aggregate((pod_name), group_count(pod_name)),
	PODSPERNODEPERGROUP(owner_name, pods_limit),
	var pods_remaining = (pods_limit - cast_bit64_to_signedbit64(total)),
	NODE(.name = node_name).
	
IMAGELOCALITY(pod_name, node_name, sum_image_size) :-
	POD(.pod_name = pod_name, .controllable__node_name = node_name),
	PODIMAGES(pod_name, image_name),
	NODEIMAGES(node_name, image_name, image_size),
	var sum_image_size = Aggregate((node_name, pod_name), sum(image_size)).

PODSTOASSIGNLABELS(pod_name, label_key, label_value, node_name):-
	PODLABELS(pod_name, label_key, label_value, _),
	PODSTOASSIGN(.pod_name = pod_name, .node_name = node_name).

CANDIDATENODESFORPODS(pod_name, node_name):-
	PODSTOASSIGN(.pod_name = pod_name),
	PODNODESELECTORLABELS(pod_name, label_key, label_value, _),	
	NODELABELS(node_name, label_key, label_value).

PODSTOASSIGNWITHPODAFFINITYLABELS(pod_name, label_key, label_value, node_name):-
	PODSTOASSIGN(.pod_name = pod_name, .node_name = node_name),
 	PODSAFFINITYMATCHEXPRESSIONS(pod_name, label_key, label_value, _, _).

PODSTOASSIGNWITHPODANTIAFFINITYLABELS(pod_name, label_key, label_value, node_name):-
	PODSTOASSIGN(.pod_name = pod_name, .node_name = node_name),
 	PODSANTIAFFINITYMATCHEXPRESSIONS(pod_name, label_key, label_value, _, _).

ALLPODS(pod_name, status, node_name,  namespace, cpu_request, memory_request, ephemeral_storage_request, pods_request, owner_name, creation_timestamp, priority, has_node_affinity):-
	POD(pod_name, status, node_name, namespace, cpu_request, memory_request, ephemeral_storage_request, pods_request, owner_name, creation_timestamp, priority),
	PODHASNODEAFFINITY(pod_name, node_name, has_node_affinity).	

